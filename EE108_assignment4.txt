#include <ee108.h>

struct directions{
    int x;
    int y;
  };

  typedef struct directions vectors;
//------------------------------------------------------------
// function declarations/prototypes
//------------------------------------------------------------
void insert(char newElement,int Length,char fifo[]);
void printArray(char arr[],int Length);
void vectorCalculate(char arr[],int Length,vectors *pP);
void printVec(vectors *pP);
void calcSlope(vectors *pP,int *pSlope);
void vectorDirection(vectors *pP);

//------------------------------------------------------------
// top level functions
//------------------------------------------------------------

  
void setup() {
  // set up serial
  Serial.begin(9600);
  
}

void loop() {
Serial.println("\nType characters and hit return - only alphabetic characters will be echoed:");
  int slope=0;
  int *pSlope;
  const int Length=10;
  vectors total={0,0};
  vectors *pTotal=&total;
  static char fifo[Length]={' ',' ',' ',' ',' ',' ',' ',' ',' ',' '};
  

 
  while (true) {
    char c;

    
    while (Serial.available() == 0)
      continue;
      
   
    c = Serial.read(); // read 1 character
    
   
   
    if ((c == '\n') || (c == '\r') || (c ==  isspace(c))) {
      break;
    }
      Serial.print(c);
      if((c=='J')||(c=='K')||(c=='L')||(c=='I')||(c=='j')||(c=='k')||(c=='i')||(c=='j')||(c=='l')){
      insert(c,Length,fifo);
      }
  }



  
  Serial.println(" ");
  Serial.print("fifo: "); 
  printArray(fifo,Length);
  Serial.println(" ");
  
  
  vectorCalculate(fifo,Length,pTotal);
  printVec(pTotal); 
  Serial.print("slope = ");
  calcSlope(pTotal,pSlope);
  Serial.print(slope);
  vectorDirection(pTotal);
 
 
}
void printArray(char arr[],int Length){
  int i;
  for(i=0;arr[i]!='\0';i++){
    Serial.print(arr[i]);
  }
}
void insert(char newElement,int Length,char fifo[]){
  int i;
  char temp;
  for(i=Length;i>=0;i--){
    if(i!=0){
      temp=fifo[i-1];
      fifo[i]=temp;
    }
    else{
      fifo[0]=newElement;
    }
  }
}
void vectorCalculate(char arr[],int Length,vectors *pP){
  int i; 
  int tmp1;
  int tmp2;
  vectors right={1,0};
  vectors down={0,-1};
  vectors up={0,1};
  vectors left={-1,0};
  for(i=0;i<Length;i++){
    if((arr[i]=='L')||(arr[i]=='l')){
      tmp1=(pP->x+right.x);
      tmp2=(pP->y+right.y);
      pP->x=tmp1;
      pP->y=tmp2;
    }
     else if((arr[i]=='K')||(arr[i]=='k')){
      tmp1=(pP->x+down.x);
      tmp2=(pP->y+down.y);
      pP->x=tmp1;
      pP->y=tmp2;
    }
     else if((arr[i]=='J')||(arr[i]=='j')){
      tmp1=(pP->x+left.x);
      tmp2=(pP->y+left.y);
      pP->x=tmp1;
      pP->y=tmp2;
    }
     else if((arr[i]=='I')||(arr[i]=='i')){
      tmp1=(pP->x+up.x);
      tmp2=(pP->y+up.y);
      pP->x=tmp1;
      pP->y=tmp2;
    }
  }
}
void printVec(vectors *pP){
  Serial.print("current vector total: ");
  Serial.print("x=");
  Serial.print(pP->x);
  Serial.print(" y=");
  Serial.print(pP->y);
  Serial.println(" ");
}
void calcSlope(vectors *pP,int *pSlope){
    int tmp1=(pP->x);
    int tmp2=(pP->y);
    pSlope = (tmp2/tmp1)*1000;
  
}
void vectorDirection(vectors *pP){
  int tmp=(pP->x)-(pP->y);
  Serial.print(" direction: ");
  if(pP->x>pP->y){
    Serial.print("RHS");
    Serial.print(" compass=");
    if(pP->y<0&&tmp<=1)
      Serial.print("NorthEast");
    else if(pP->y<0&&tmp>-1)
      Serial.print("Southeast");
    else
      Serial.print("East");
  }
  else if(pP->x<pP->y){
    Serial.print("LHS");
    Serial.print(" compass=");
    if(pP->y<0&&tmp<=1)
      Serial.print("NorthWest");
    else if(pP->y<0&&tmp>=-1)
      Serial.print("Southwest");
    else
      Serial.print("West");
  }
  else if(pP->y==0&&pP->x>0){
    Serial.print("North");
  }
  else if(pP->y==0&&pP->x<0){
    Serial.print("South");
  }
  
}

Q2
the most important this i learned was not to underestimate the power of stucts, this assignment
wouldve been a lot harder without them and the code wouldve been a lot longer without typedef 
for that matter aswell.
Q3
getting the character array to print but that was down to my own ineptitude and not wiht the difficulty
of the lab, also the slope arithmetic was difficult although im not sure why it was this time.